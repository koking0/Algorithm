
标题：带分数

    100 可以表示为带分数的形式：100 = 3 + 69258 / 714

    还可以表示为：100 = 82 + 3546 / 197

    注意特征：带分数中，数字1~9分别出现且只出现一次（不包含0）。

    类似这样的带分数，100 有 11 种表示法。

题目要求：
从标准输入读入一个正整数N (N<1000*1000)
程序输出该数字用数码1~9不重复不遗漏地组成带分数表示的全部种数。
注意：不要求输出每个表示，只统计有多少表示法！


例如：
用户输入：
100
程序输出：
11

再例如：
用户输入：
105
程序输出：
6


资源约定：
峰值内存消耗（含虚拟机） < 64M
CPU消耗  < 3000ms


请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。

所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。
注意：不要使用package语句。不要使用jdk1.6及以上版本的特性。
注意：主类的名字必须是：Main，否则按无效代码处理。



方法1（蛮力枚举）：
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class Main {
	//判断数a,b,c所有位置数是否刚好是1~9组成，如是返回true，否则返回false
	public boolean judge(int a, int b, int c) {
		ArrayList<Integer> list = new ArrayList<Integer>();
		while(a > 0) {
			int temp = a % 10;
			a = a / 10;
			list.add(temp);
		}
		while(b > 0) {
			int temp = b % 10;
			b = b / 10;
			list.add(temp);
		}
		while(c > 0) {
			int temp = c % 10;
			c = c / 10;
			list.add(temp);
		}
		Collections.sort(list);
		if(list.size() == 9) {
			int i = 0;
			for(;i < 9;i++) {
				if(list.get(i) == i + 1)
					continue;
				else
					return false;
			}
			if(i == 9)
				return true;
		}
		return false;
	}
	//判断数x中是否有重复数字，若有返回false，否则返回false
	public boolean judge1(int x) {
		ArrayList<Integer> list = new ArrayList<Integer>();
		while(x > 0) {
			int temp = x % 10;
			x = x / 10;
			list.add(temp);
		}
		Collections.sort(list);
		for(int i = 1;i < list.size();i++) {
			if(list.get(i - 1) == list.get(i))
				return false;
		}
		return true;
	}
	
	public void printResult(int n) {
		int result = 0;
		int a, b, c;  //n = a + b / c（带分数）
		for(a = 1; a < n;a++) {
			if(!judge1(a))
				continue;
			for(c = 1;c < 10000;c++) {
				b = (n - a) * c;
				if(!judge1(b) || !judge1(c))
					continue;
				if(judge(a, b, c))
					result++;
			}
		}
		System.out.println(result);
		return;
	}
	
	public static void main(String[] args) {
		Main test = new Main();
		Scanner in = new Scanner(System.in);
		int N = in.nextInt();
		test.printResult(N);
	}
}

方法2（DFS遍历枚举）：
import java.util.Scanner;

public class Main {
	
	public static int count = 0;
	
	public void swap(int[] A, int a, int b) {
		int temp = A[a];
		A[a] = A[b];
		A[b] = temp;
	}
	
	//全排列
	public void dfs(int[] A, int step, int n) {
		if(step == A.length) {
			check(A, n);
			return;
		} else {
			for(int i = step;i < A.length;i++) {
				swap(A, i, step);
				dfs(A, step + 1, n);
				swap(A, i, step);
			}
		}
		return;
	}
	
	public void check(int[] A, int n) {
		int len = String.valueOf(n).length();
		String arrayA = "";
		for(int i = 0;i < A.length;i++) {
			arrayA += A[i];
		}
		for(int i = 1;i <= len;i++) {
			int a = Integer.valueOf(arrayA.substring(0, i));
			if(a > n)
				continue;
			for(int j = i + (9 - i) / 2;j < 9;j++) {
				int b = Integer.valueOf(arrayA.substring(i, j));
				int c = Integer.valueOf(arrayA.substring(j, 9));
				if(b < c || b % c != 0)
					continue;
				if(a + b / c == n) 
					count++;
			}
		}
		return;
	}
	
	public static void main(String[] args) {
		Main test = new Main();
		int[] A = {1,2,3,4,5,6,7,8,9};
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		test.dfs(A, 0, n);
		System.out.println(count);
	}
}

